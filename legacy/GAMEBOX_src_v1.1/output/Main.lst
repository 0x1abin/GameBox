C51 COMPILER V9.52.0.0   MAIN                                                              10/24/2014 23:17:56 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\Main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\Main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\output\Main.lst) OBJE
                    -CT(.\output\Main.obj)

line level    source

   1          /*
   2          v1.0:
   3                  2014-7-26 00:00:00      :完成有俄罗斯方块游戏基本模型;
   4                  2014-7-28 02:12:03      :将原先临时使用的延时键盘扫描改为外部中断状态位检测键;
   5                  2014-7-28 20:40:37      :完成俄罗斯方块分数计数及分数显示功能;
   6                  2014-8-1 01:01:54       :将较早之前完成贪吃蛇游戏代码合并植入;
   7                  2014-8-2 17:04:25       :整理之前的临时源码,使工程文件规范化;
   8                  2014-8-3 23:50:49       :构建游戏选择画面基本模型,完成画面平移效果;
   9                  2014-8-5 00:50:04       :改进LED点阵底层驱动,用软件PWM调节画面亮度;
  10                  2014-8-7 00:53:35       :完成赛车游戏,用PWM分层扫描画面,形成游戏画面对比度;
  11                  2014-8-8 02:16:44       :完成赛车游戏选择预览画面,并将三个游戏合并在一起;
  12                  2014-8-12 01:47:07      :将逐行扫描改为逐点扫描,使显示亮度均匀;增加亮度调节功能;
  13                  2014-9-9 00:32:40       :修改及优化若干细节；
  14          
  15          v1.1:
  16                  2014-9-18 0:57:23       :重新布局电路，修改原先不合理的地方，为制作PCB板作准备；
  17                  2014-9-19 22:02:36      :加入游戏音效，并且可以通过软件方式开关声音；
  18                  2014-9-21 14:59:39      :增加三位mini数码管，实时显示游戏分数，数码管共用点阵并行数据口；
  19                  ~~~~~~~~~~~忘记备注
  20                  2014-10-20 21:30:15     :加入射击游戏,将GUI模块化，简化流程
  21                  
  22          */
  23          
  24          #include "config.h"
  25          
  26          volatile uint8 data keypad = K_NULL;    //键盘状态
  27          volatile uint8 data keycont = 0;                //键盘检测消抖定时器
  28          volatile uint16 data tms = 0;                   //1ms T0定时器
  29          bit key_state = 0;                                              //按键状态
  30          
  31          uint16 data speeds = 0;         //游戏速度
  32          uint16 data scores = 0;         //游戏计分
  33          bit Glife = 1;                          //游戏生命
  34          bit sound_ON = 1;                       //音效开关
  35          uint8 data duty = 80;           //PWM，默认亮度
  36          uint8 data DispRAM[16]={0};
  37          uint8 code bitman[8]={1,2,4,8,16,32,64,128};//用于数字序号定位0~7bit位
  38          
  39          uint8 code num[10][5]=          //阳码
  40          {
  41                  {0x7,0x5,0x5,0x5,0x7},
  42                  {0x2,0x6,0x2,0x2,0x7},
  43                  {0x7,0x1,0x7,0x4,0x7},
  44                  {0x7,0x1,0x7,0x1,0x7},
  45                  {0x5,0x5,0x7,0x1,0x1},
  46                  {0x7,0x4,0x7,0x1,0x7},
  47                  {0x7,0x4,0x7,0x5,0x7},
  48                  {0x7,0x1,0x1,0x1,0x1},
  49                  {0x7,0x5,0x7,0x5,0x7},
  50                  {0x7,0x5,0x7,0x1,0x7}
  51          };
  52          
  53          /*********************PORT_INIT********************/
  54          void Port_Init()
C51 COMPILER V9.52.0.0   MAIN                                                              10/24/2014 23:17:56 PAGE 2   

  55          {
  56   1      //      P0 = 0X00;
  57   1      //      P1 = 0X00;
  58   1      //      P2 = 0X00;
  59   1      //      P3 = 0Xff;
  60   1      //      P4 = 0X00;
  61   1      //      P5 = 0X00;
  62   1              P0M0 = 0Xff;
  63   1              P0M1 = 0X00;
  64   1              P1M0 = 0Xff;
  65   1              P1M1 = 0X00;
  66   1              P2M0 = 0Xff;
  67   1              P2M1 = 0X00;
  68   1              P3M0 = 0X00;
  69   1              P3M1 = 0X00;
  70   1              P4M0 = 0Xff;
  71   1              P4M1 = 0X00;
  72   1              P5M0 = 0Xff;
  73   1              P5M1 = 0X00;
  74   1      }
  75          
  76          void Init_Timer()
  77          {
  78   1      /******************定时器0中断设置**********************/
  79   1              AUXR |= 0x80;                   //定时器0为1T模式
  80   1          TMOD = 0x00;                    //设置定时器为模式0(16位自动重装载)
  81   1          TL0 = T1MS;                     //初始化计时值
  82   1          TH0 = T1MS >> 8;
  83   1          TR0 = 1;                        //定时器0开始计时
  84   1          ET0 = 1;                        //使能定时器0中断
  85   1              
  86   1      /*****************外部中断设置*************************/        
  87   1              IT0 = 1;                    //设置INT0下降沿触发
  88   1          EX0 = 1;                    //使能外部中断INT0
  89   1              IT1 = 1;                    //设置INT1下降沿触发
  90   1          EX1 = 1;                    //使能外部中断INT1
  91   1              INT_CLKO |= 0x70;           //使能INT2,INT3,INT4(EX4 = 1,EX3 = 1,EX2 = 1
  92   1              
  93   1              EA = 1; 
  94   1      }
  95          
  96          void Array_CLR(uint8 *p)
  97          {
  98   1              uint8 i=0;
  99   1              while(i!=16)
 100   1              {
 101   2                      p[i] = 0x00;
 102   2                      i++;
 103   2              }
 104   1      }
 105          
 106          void ShowScore(uint score)
 107          {
 108   1              uint8 i;
 109   1              uint8 qx,bx,sx,gx;
 110   1              qx = score /1000;
 111   1              bx = score %1000 /100;
 112   1              sx = score %100/10;
 113   1              gx = score %10;
 114   1      
 115   1              Array_CLR(DispRAM);
 116   1      
C51 COMPILER V9.52.0.0   MAIN                                                              10/24/2014 23:17:56 PAGE 3   

 117   1              for(i=0;i<5;i++)
 118   1                      DispRAM[8-i] = (num[sx][i]<<4) | (num[gx][i]);
 119   1              
 120   1              for(i=0;i<5;i++)
 121   1                      DispRAM[14-i] = (num[qx][i]<<5) | (num[bx][i]<<1);
 122   1                                      
 123   1      //      MatxDisp(DispRAM,duty);
 124   1      }
 125          
 126          void main()
 127          {
 128   1              Port_Init();
 129   1              Sound_Init();
 130   1              Init_Timer();
 131   1              Sound_Tone(1,14,5);//滴
 132   1              
 133   1              srand(TL0);             
 134   1              delayms(100);
 135   1              Play_Music(sound_game_start);
 136   1              Flash_Screen_Clear();
 137   1              while(1) 
 138   1              {
 139   2                      tms = 0;
 140   2                      keypad = K_NULL;//清除按键状态
 141   2                      switch (GUI_Main())     //进入用户游戏选择界面，返回选择的游戏
 142   2                      {
 143   3                              case 1: Tetris_Game();  break;
 144   3                              case 2: Snake_Game();   break;
 145   3                              case 3: RAC_Game();             break;
 146   3                              case 4: Shot_Game();    break;
 147   3                      }
 148   2                      Play_Music(sound_game_over);
 149   2                      Flash_Screen_Clear();
 150   2                      ShowScore(scores);      //将分数载入显存
 151   2                      delayms(300);
 152   2                      
 153   2                      keypad = K_NULL;
 154   2                      while(keypad != K_UP)   //在没按下OK键时保持分数显示
 155   2                      {
 156   3                              MatxDisp(DispRAM,duty);
 157   3                              SMG_Display(scores,duty);
 158   3                      }
 159   2              }       
 160   1      }
 161          
 162          /* Timer0 interrupt routine */
 163          void T0_Timer_1ms_int() interrupt 1 using 1
 164          {
 165   1              if(tms<0xfffe)  tms++;  //防止溢出
 166   1              if(key_state){ if(!--keycont) key_state=0;}
 167   1      
 168   1              if(PIN_TR2)//TR2如果打开，则开始播放音效
 169   1              {
 170   2                      if(!sound_cnt_time--){
 171   3                              TR2_OFF;
 172   3                              beep = 1;
 173   3                              if(music_p[s_p][1]){
 174   4                                      Sound_Tone(sound_ON,music_p[s_p][0],music_p[s_p][1]);
 175   4                                      s_p++; //自动装载下一个音符，实现音效与游戏“同时”运行
 176   4                              }
 177   3                      }
 178   2              }
C51 COMPILER V9.52.0.0   MAIN                                                              10/24/2014 23:17:56 PAGE 4   

 179   1              if(KEY_DOWN==0 & KEY_UP==0)     IAP_CONTR=0x60;//软件复位下载程序
 180   1      }
 181          
 182          void T2_Timer_Sound_freq() interrupt 12           //中断入口
 183          {
 184   1           beep = ~beep; //蜂鸣器频率震动
 185   1      }
 186          
 187          uint8 Get_Kvuale(uint8 key_delay)//键值消抖处理，参数为灵敏度调节
 188          {
 189   1              uint8 kvuale = K_NULL;
 190   1              if(keypad != K_NULL)
 191   1              {       
 192   2                      if(!key_state)
 193   2                      {
 194   3                              key_state=1;
 195   3                              kvuale = keypad;
 196   3                              keycont = key_delay;
 197   3                      }
 198   2                      keypad = K_NULL;
 199   2              }
 200   1              return kvuale;
 201   1      }
 202          /*********外部中断按键区**********/
 203          void exint0() interrupt 0       //INT0
 204          {
 205   1              keypad = 0;
 206   1      }
 207          void exint1() interrupt 2       //INT1
 208          {
 209   1              keypad = 1;     
 210   1      }
 211          void exint2() interrupt 10      //INT2
 212          {
 213   1              keypad = 2;
 214   1      }
 215          void exint3() interrupt 11      //INT3
 216          {
 217   1              keypad = 3;
 218   1      }
 219          void exint4() interrupt 16      //INT4
 220          {       
 221   1              keypad = 4;
 222   1      }
 223          
 224          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    725    ----
   CONSTANT SIZE    =     58    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
